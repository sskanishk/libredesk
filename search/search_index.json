{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Libredesk is an open-source, self-hosted customer support desk \u2014 single binary app.</p>"},{"location":"#developers","title":"Developers","text":"<p>Libredesk is licensed under AGPLv3. Contributions are welcome.</p> <ul> <li>Source code: GitHub</li> <li>Setup guide: Developer setup</li> <li>Stack: Go backend, Vue 3 frontend (Shadcn UI)</li> </ul>"},{"location":"api-getting-started/","title":"API getting started","text":"<p>You can access the Libredesk API to interact with your instance programmatically.</p>"},{"location":"api-getting-started/#generating-api-keys","title":"Generating API keys","text":"<ol> <li>Edit agent: Go to Admin \u2192 Teammate \u2192 Agent \u2192 Edit</li> <li>Generate new API key: An API Key and API Secret will be generated for the agent</li> <li>Save the credentials: Keep both the API Key and API Secret secure</li> <li>Key management: You can revoke / regenerate API keys at any time from the same page</li> </ol>"},{"location":"api-getting-started/#using-the-api","title":"Using the API","text":"<p>LibreDesk supports two authentication schemes:</p>"},{"location":"api-getting-started/#basic-authentication","title":"Basic authentication","text":"<pre><code>curl -X GET \"https://your-libredesk-instance.com/api/endpoint\" \\\n  -H \"Authorization: Basic &lt;base64_encoded_key:secret&gt;\"\n</code></pre>"},{"location":"api-getting-started/#token-authentication","title":"Token authentication","text":"<pre><code>curl -X GET \"https://your-libredesk-instance.com/api/endpoint\" \\\n  -H \"Authorization: token your_api_key:your_api_secret\"\n</code></pre>"},{"location":"api-getting-started/#api-documentation","title":"API Documentation","text":"<p>Complete API documentation with available endpoints and examples coming soon.</p>"},{"location":"developer-setup/","title":"Developer Setup","text":"<p>Libredesk is a monorepo with a Go backend and a Vue.js frontend. The frontend uses Shadcn for UI components.</p>"},{"location":"developer-setup/#pre-requisites","title":"Pre-requisites","text":"<ul> <li>go</li> <li>nodejs (if you are working on the frontend) and <code>pnpm</code></li> <li>redis</li> <li>postgres database (&gt;= 13)</li> </ul>"},{"location":"developer-setup/#first-time-setup","title":"First time setup","text":"<p>Clone the repository:</p> <pre><code>git clone https://github.com/abhinavxd/libredesk.git\n</code></pre> <ol> <li>Copy <code>config.toml.sample</code> as <code>config.toml</code> and add your config.</li> <li>Run <code>make</code> to build the libredesk binary. Once the binary is built, run <code>./libredesk --install</code> to run the DB setup and set the System user password.</li> </ol>"},{"location":"developer-setup/#running-the-dev-environment","title":"Running the Dev Environment","text":"<ol> <li>Run <code>make run-backend</code> to start the libredesk backend dev server on <code>:9000</code>.</li> <li>Run <code>make run-frontend</code> to start the Vue frontend in dev mode using pnpm on <code>:8000</code>. Requests are proxied to the backend running on <code>:9000</code> check <code>vite.config.js</code> for the proxy config.</li> </ol>"},{"location":"developer-setup/#production-build","title":"Production Build","text":"<p>Run <code>make</code> to build the Go binary, build the Javascript frontend, and embed the static assets producing a single self-contained binary, <code>libredesk</code>.</p>"},{"location":"installation/","title":"Installation","text":"<p>Libredesk is a single binary application that requires postgres and redis to run. You can install it using the binary or docker.</p>"},{"location":"installation/#binary","title":"Binary","text":"<ol> <li>Download the latest release and extract the libredesk binary.</li> <li><code>./libredesk --install</code> to install the tables in the Postgres DB (\u2a7e 13) and set the System user password.</li> <li>Run <code>./libredesk</code> and visit <code>http://localhost:9000</code> and login with the email <code>System</code> and the password you set during installation.</li> </ol> <p>Tip</p> <p>To set the System user password during installation, set the environment variables: <code>LIBREDESK_SYSTEM_USER_PASSWORD=xxxxxxxxxxx ./libredesk --install</code></p>"},{"location":"installation/#docker","title":"Docker","text":"<p>The latest image is available on DockerHub at <code>libredesk/libredesk:latest</code></p> <p>The recommended method is to download the docker-compose.yml file, customize it for your environment and then to simply run <code>docker compose up -d</code>.</p> <pre><code># Download the compose file and the sample config file in the current directory.\ncurl -LO https://github.com/abhinavxd/libredesk/raw/main/docker-compose.yml\ncurl -LO https://github.com/abhinavxd/libredesk/raw/main/config.sample.toml\n\n# Copy the config.sample.toml to config.toml and edit it as needed.\ncp config.sample.toml config.toml\n\n# Run the services in the background.\ndocker compose up -d\n\n# Setting System user password.\ndocker exec -it libredesk_app ./libredesk --set-system-user-password\n</code></pre> <p>Go to <code>http://localhost:9000</code> and login with the email <code>System</code> and the password you set using the <code>--set-system-user-password</code> command.</p>"},{"location":"installation/#compiling-from-source","title":"Compiling from source","text":"<p>To compile the latest unreleased version (<code>main</code> branch):</p> <ol> <li>Make sure <code>go</code>, <code>nodejs</code>, and <code>pnpm</code> are installed on your system.</li> <li><code>git clone git@github.com:abhinavxd/libredesk.git</code></li> <li><code>cd libredesk &amp;&amp; make</code>. This will generate the <code>libredesk</code> binary.</li> </ol>"},{"location":"installation/#nginx","title":"Nginx","text":"<p>Libredesk uses websockets for real-time updates. If you are using Nginx, you need to add the following (or similar) configuration to your Nginx configuration file.</p> <pre><code>client_max_body_size 100M;\nlocation / {\n    proxy_pass http://localhost:9000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_cache_bypass $http_upgrade;\n}\n</code></pre>"},{"location":"sso/","title":"Setting up SSO","text":"<p>Libredesk supports external OpenID Connect providers (e.g., Google, Keycloak) for signing in users.</p> <p>Note</p> <p>User accounts must be created in Libredesk manually; signup is not supported.</p>"},{"location":"sso/#generic-configuration-steps","title":"Generic Configuration Steps","text":"<p>Since each provider\u2019s configuration might differ, consult your provider\u2019s documentation for any additional or divergent settings.</p> <ol> <li> <p>Provider setup:    In your provider\u2019s admin console, create a new OpenID Connect application/client. Retrieve:</p> <ul> <li>Client ID</li> <li>Client Secret</li> </ul> </li> <li> <p>Libredesk configuration:     In Libredesk, navigate to Security &gt; SSO and click New SSO and enter the following details:</p> <ul> <li>Provider URL (e.g., the URL of your OpenID provider)</li> <li>Client ID</li> <li>Client Secret</li> <li>A descriptive name for the connection</li> </ul> </li> <li> <p>Redirect URL:    After saving, copy the generated Callback URL from Libredesk and add it as a valid redirect URI in your provider\u2019s client settings.</p> </li> </ol>"},{"location":"sso/#provider-examples","title":"Provider Examples","text":""},{"location":"sso/#keycloak","title":"Keycloak","text":"<ol> <li> <p>Log in to your Keycloak Admin Console.</p> </li> <li> <p>In Keycloak, navigate to Clients and click Create:</p> <ul> <li>Client ID (e.g., <code>libredesk-app</code>)</li> <li>Client Protocol: <code>openid-connect</code></li> <li>Root URL and Web Origins: your app domain (e.g., <code>https://ticket.example.com</code>)</li> <li>Under Authentication flow, uncheck everything except the standard flow</li> <li>Click save</li> </ul> </li> <li> <p>Go to the credentials tab:</p> <ul> <li>Ensure client authenticator is set to <code>Client Id and Secret</code></li> <li>Note down the generated client secret</li> </ul> </li> <li> <p>In Libredesk, go to Admin &gt; Security &gt; SSO and click New SSO:</p> <ul> <li>Provider URL (e.g., <code>https://keycloak.example.com/realms/yourrealm</code>)</li> <li>Name (e.g., <code>Keycloak</code>)</li> <li>Client ID</li> <li>Client secret</li> <li>Click save</li> </ul> </li> <li> <p>After saving, click on the three dots and choose Edit to open the new SSO entry.</p> </li> <li> <p>Copy the generated Callback URL from Libredesk.</p> </li> <li> <p>Back in Keycloak, edit the client and add the Callback URL to Valid Redirect URIs:</p> <ul> <li>e.g., <code>https://ticket.example.com/api/v1/oidc/1/finish</code></li> </ul> </li> </ol>"},{"location":"templating/","title":"Templating","text":"<p>Templating in outgoing emails allows you to personalize content by embedding dynamic expressions like <code>{{ .Recipient.FullName }}</code>. These expressions reference fields from the conversation, contact, recipient, and author objects.</p>"},{"location":"templating/#outgoing-email-template-expressions","title":"Outgoing Email Template Expressions","text":"<p>If you want to customize the look of outgoing emails, you can do so in the Admin &gt; Templates -&gt; Outgoing Email Templates section. This template will be used for all outgoing emails including replies to conversations, notifications, and other system-generated emails.</p>"},{"location":"templating/#conversation-variables","title":"Conversation Variables","text":"Variable Value {{ .Conversation.ReferenceNumber }} The unique reference number of the conversation {{ .Conversation.Subject }} The subject of the conversation {{ .Conversation.Priority }} The priority level of the conversation {{ .Conversation.UUID }} The unique identifier of the conversation"},{"location":"templating/#contact-variables","title":"Contact Variables","text":"Variable Value {{ .Contact.FirstName }} First name of the contact/customer {{ .Contact.LastName }} Last name of the contact/customer {{ .Contact.FullName }} Full name of the contact/customer {{ .Contact.Email }} Email address of the contact/customer"},{"location":"templating/#recipient-variables","title":"Recipient Variables","text":"Variable Value {{ .Recipient.FirstName }} First name of the recipient {{ .Recipient.LastName }} Last name of the recipient {{ .Recipient.FullName }} Full name of the recipient {{ .Recipient.Email }} Email address of the recipient"},{"location":"templating/#author-variables","title":"Author Variables","text":"Variable Value {{ .Author.FirstName }} First name of the message author {{ .Author.LastName }} Last name of the message author {{ .Author.FullName }} Full name of the message author {{ .Author.Email }} Email address of the message author"},{"location":"templating/#example-outgoing-email-template","title":"Example outgoing email template","text":"<pre><code>Dear {{ .Recipient.FirstName }},\n\n{{ template \"content\" . }}\n\nBest regards,\n{{ .Author.FullName }}\n---\nReference: {{ .Conversation.ReferenceNumber }}\n</code></pre> <p>Here, the <code>{{ template \"content\" . }}</code> serves as a placeholder for the body of the outgoing email. It will be replaced with the actual email content at the time of sending.</p> <p>Similarly, the <code>{{ .Recipient.FirstName }}</code> expression will dynamically insert the recipient's first name when the email is sent.</p>"},{"location":"translations/","title":"Translations / Internationalization","text":"<p>You can help translate libreDesk into different languages by contributing here: Libredesk Translation Project</p>"},{"location":"upgrade/","title":"Upgrade","text":"<p>Warning</p> <p>Always take a backup of the Postgres database before upgrading Libredesk.</p>"},{"location":"upgrade/#binary","title":"Binary","text":"<ul> <li>Stop running libredesk binary.</li> <li>Download the latest release and extract the libredesk binary and overwrite the previous version.</li> <li><code>./libredesk --upgrade</code> to upgrade an existing database schema. Upgrades are idempotent and running them multiple times have no side effects.</li> <li>Run <code>./libredesk</code> again.</li> </ul>"},{"location":"upgrade/#docker","title":"Docker","text":"<pre><code>docker compose down app\ndocker compose pull\ndocker compose up app -d\n</code></pre>"},{"location":"webhooks/","title":"Webhooks","text":"<p>Webhooks allow you to receive real-time HTTP notifications when specific events occur in your Libredesk instance. This enables you to integrate Libredesk with external systems and automate workflows based on conversation and message events.</p>"},{"location":"webhooks/#overview","title":"Overview","text":"<p>When a configured event occurs in Libredesk, a HTTP POST request is sent to the webhook URL you specify. The request contains a JSON payload with event details and relevant data.</p>"},{"location":"webhooks/#webhook-configuration","title":"Webhook Configuration","text":"<ol> <li>Navigate to Admin &gt; Integrations &gt; Webhooks in your Libredesk dashboard</li> <li>Click Create Webhook</li> <li>Configure the following:</li> <li>Name: A descriptive name for your webhook</li> <li>URL: The endpoint URL where webhook payloads will be sent</li> <li>Events: Select which events you want to subscribe to</li> <li>Secret: Optional secret key for signature verification</li> <li>Status: Enable or disable the webhook</li> </ol>"},{"location":"webhooks/#security","title":"Security","text":""},{"location":"webhooks/#signature-verification","title":"Signature Verification","text":"<p>If you provide a secret key, webhook payloads will be signed using HMAC-SHA256. The signature is included in the <code>X-Signature-256</code> header in the format <code>sha256=&lt;signature&gt;</code>.</p> <p>To verify the signature:</p> <pre><code>import hmac\nimport hashlib\n\ndef verify_signature(payload, signature, secret):\n    expected_signature = hmac.new(\n        secret.encode('utf-8'),\n        payload,\n        hashlib.sha256\n    ).hexdigest()\n    return hmac.compare_digest(f\"sha256={expected_signature}\", signature)\n</code></pre>"},{"location":"webhooks/#headers","title":"Headers","text":"<p>Each webhook request includes the following headers:</p> <ul> <li><code>Content-Type</code>: <code>application/json</code></li> <li><code>User-Agent</code>: <code>Libredesk-Webhook/&lt;libredesk_version_here&gt;</code></li> <li><code>X-Signature-256</code>: HMAC signature (if secret is configured)</li> </ul>"},{"location":"webhooks/#available-events","title":"Available Events","text":""},{"location":"webhooks/#conversation-events","title":"Conversation Events","text":""},{"location":"webhooks/#conversationcreated","title":"<code>conversation.created</code>","text":"<p>Triggered when a new conversation is created.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"conversation.created\",\n  \"timestamp\": \"2025-06-15T10:30:00Z\",\n  \"payload\": {\n    \"id\": 123,\n    \"created_at\": \"2025-06-15T10:30:00Z\",\n    \"updated_at\": \"2025-06-15T10:30:00Z\",\n    \"uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"contact_id\": 456,\n    \"inbox_id\": 1,\n    \"reference_number\": \"100\",\n    \"priority\": \"Medium\",\n    \"priority_id\": 2,\n    \"status\": \"Open\",\n    \"status_id\": 1,\n    \"subject\": \"Help with account setup\",\n    \"inbox_name\": \"Support\",\n    \"inbox_channel\": \"email\",\n    \"contact\": {\n      \"id\": 456,\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"email\": \"john.doe@example.com\",\n      \"type\": \"contact\"\n    },\n    \"custom_attributes\": {},\n    \"tags\": []\n  }\n}\n</code></pre>"},{"location":"webhooks/#conversationstatus_changed","title":"<code>conversation.status_changed</code>","text":"<p>Triggered when a conversation's status is updated.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"conversation.status_changed\",\n  \"timestamp\": \"2025-06-15T10:35:00Z\",\n  \"payload\": {\n    \"conversation_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"previous_status\": \"Open\",\n    \"new_status\": \"Resolved\",\n    \"snooze_until\": \"\",\n    \"actor_id\": 789\n  }\n}\n</code></pre>"},{"location":"webhooks/#conversationassigned","title":"<code>conversation.assigned</code>","text":"<p>Triggered when a conversation is assigned to a user.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"conversation.assigned\",\n  \"timestamp\": \"2025-06-15T10:32:00Z\",\n  \"payload\": {\n    \"conversation_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"assigned_to\": 789,\n    \"actor_id\": 789\n  }\n}\n</code></pre>"},{"location":"webhooks/#conversationunassigned","title":"<code>conversation.unassigned</code>","text":"<p>Triggered when a conversation is unassigned from a user.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"conversation.unassigned\",\n  \"timestamp\": \"2025-06-15T10:40:00Z\",\n  \"payload\": {\n    \"conversation_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"actor_id\": 789\n  }\n}\n</code></pre>"},{"location":"webhooks/#conversationtags_changed","title":"<code>conversation.tags_changed</code>","text":"<p>Triggered when tags are added or removed from a conversation.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"conversation.tags_changed\",\n  \"timestamp\": \"2025-06-15T10:45:00Z\",\n  \"payload\": {\n    \"conversation_uuid\": \"550e8400-e29b-41d4-a716-446655440000\",\n    \"previous_tags\": [\"bug\", \"priority\"],\n    \"new_tags\": [\"bug\", \"priority\", \"resolved\"],\n    \"actor_id\": 789\n  }\n}\n</code></pre>"},{"location":"webhooks/#message-events","title":"Message Events","text":""},{"location":"webhooks/#messagecreated","title":"<code>message.created</code>","text":"<p>Triggered when a new message is created in a conversation.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"message.created\",\n  \"timestamp\": \"2025-06-15T10:33:00Z\",\n  \"payload\": {\n    \"id\": 987,\n    \"created_at\": \"2025-06-15T10:33:00Z\",\n    \"updated_at\": \"2025-06-15T10:33:00Z\",\n    \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"type\": \"outgoing\",\n    \"status\": \"sent\",\n    \"conversation_id\": 123,\n    \"content\": \"&lt;p&gt;Hello! How can I help you today?&lt;/p&gt;\",\n    \"text_content\": \"Hello! How can I help you today?\",\n    \"content_type\": \"html\",\n    \"private\": false,\n    \"sender_id\": 789,\n    \"sender_type\": \"agent\",\n    \"attachments\": []\n  }\n}\n</code></pre>"},{"location":"webhooks/#messageupdated","title":"<code>message.updated</code>","text":"<p>Triggered when an existing message is updated.</p> <p>Sample Payload:</p> <pre><code>{\n  \"event\": \"message.updated\",\n  \"timestamp\": \"2025-06-15T10:34:00Z\",\n  \"payload\": {\n    \"id\": 987,\n    \"created_at\": \"2025-06-15T10:33:00Z\",\n    \"updated_at\": \"2025-06-15T10:34:00Z\",\n    \"uuid\": \"123e4567-e89b-12d3-a456-426614174000\",\n    \"type\": \"outgoing\",\n    \"status\": \"sent\",\n    \"conversation_id\": 123,\n    \"content\": \"&lt;p&gt;Hello! How can I help you today? (Updated)&lt;/p&gt;\",\n    \"text_content\": \"Hello! How can I help you today? (Updated)\",\n    \"content_type\": \"html\",\n    \"private\": false,\n    \"sender_id\": 789,\n    \"sender_type\": \"agent\",\n    \"attachments\": []\n  }\n}\n</code></pre>"},{"location":"webhooks/#delivery-and-retries","title":"Delivery and Retries","text":"<ul> <li>Webhooks requests timeout can be configured in the <code>config.toml</code> file</li> <li>Failed deliveries are not automatically retried</li> <li>Webhook delivery runs in a background worker pool for better performance</li> <li>If the webhook queue is full (configurable in config.toml file), new events may be dropped</li> </ul>"},{"location":"webhooks/#testing-webhooks","title":"Testing Webhooks","text":"<p>You can test your webhook configuration using tools like:</p> <ul> <li>Webhook.site - Generate a temporary URL to inspect webhook payloads</li> </ul>"}]}